# Error variances
par_table$ustart[6] <- fixed_values["SE_F1"]
par_table$ustart[7] <- fixed_values["SE_F2"]
par_table$ustart[8] <- fixed_values["SE_F3"]
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none", control=list(iter.max=50))
summary(str.final)
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none", control=list(iter.max=1))
summary(str.final)
library(lavaan)
library(mirt)
library(dplyr)
# Data Generation
set.seed(2)
# Define relevant variables
N   <- 100
thresh1 <- c(-2, 0, 2)
thresh2 <- c(-1, 0, 1)
thresh3 <- c(-1.2, 0.2, 1.2)
thresh4 <- c(-2.3, -0.5, 1)
thresh5 <- c(-1.2, 0.5, 1.7)
thresh6 <- c(-1.3, 0.7, 2.3)
thresh7 <- c(-2.4, -0.3, 0.7)
thresh8 <- c(-1.2, 0.6, 1.8)
thresh9 <- c(-1.4, 0.7, 1.9)
# Generate data
# MM
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
# SM
beta <- matrix(c(0, 0.2, 0.2,
0, 0,   0  ,
0, 0,   0  ), byrow = T, ncol = 3)
psi  <- matrix(c(1, 0,   0,
0, 1,   0.5,
0, 0.5, 1), byrow = T, ncol = 3)
I <- diag(3)
# Observed data
library(MASS)
sigma <- lambda %*% solve(I - beta) %*% psi %*% solve(t(I - beta)) %*% t(lambda) + theta
Data <- as.data.frame(mvrnorm(n = N, mu = rep(0, 9), Sigma = sigma, empirical = T))
colnames(Data) <- paste0(rep("x", 9), 1:9)
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = Data, ordered = F, std.lv = F)
summary(model.sem, rsquare = T)
# cor(Data)
# Make categorical
Data[, 1] <- as.numeric(cut(Data[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(Data[, 2], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(Data[, 3], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(Data[, 4], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(Data[, 5], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(Data[, 6], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(Data[, 7], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(Data[, 8], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(Data[, 9], breaks = c(-Inf, thresh9, Inf)))
# cor(Data)
# lavCor(Data, ordered = T)
# Check lavaan vs mirt
model.sem.cat  <- sem(model = model, data = Data, ordered = T, std.lv = F)
summary(model.sem.cat, rsquare = T)
lavInspect(model.sem.cat, what = "est")$beta
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "graded")
coef(model.mirt)
summary(model.mirt)
fs <- fscores(model.mirt) #, full.scores.SE = T)
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
lm(f1 ~ f2 + f3, data = as.data.frame(predict(model.sem.cat)))
# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
summary(model.sem.con)
lavInspect(model.sem.con, what = "est")$beta
lavInspect(model.sem.cat, what = "est")$beta
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
library(lavaan)
library(mirt)
library(dplyr)
# Data Generation
set.seed(5)
# Define relevant variables
N   <- 100
thresh1 <- c(-2, 0, 2)
thresh2 <- c(-1, 0, 1)
thresh3 <- c(-1.2, 0.2, 1.2)
thresh4 <- c(-2.3, -0.5, 1)
thresh5 <- c(-1.2, 0.5, 1.7)
thresh6 <- c(-1.3, 0.7, 2.3)
thresh7 <- c(-2.4, -0.3, 0.7)
thresh8 <- c(-1.2, 0.6, 1.8)
thresh9 <- c(-1.4, 0.7, 1.9)
# Generate data
# MM
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
# SM
beta <- matrix(c(0, 0.3, 0.3,
0, 0,   0  ,
0, 0,   0  ), byrow = T, ncol = 3)
psi  <- matrix(c(1, 0,   0,
0, 1,   0.5,
0, 0.5, 1), byrow = T, ncol = 3)
I <- diag(3)
# Observed data
library(MASS)
sigma <- lambda %*% solve(I - beta) %*% psi %*% solve(t(I - beta)) %*% t(lambda) + theta
Data <- as.data.frame(mvrnorm(n = N, mu = rep(0, 9), Sigma = sigma, empirical = T))
colnames(Data) <- paste0(rep("x", 9), 1:9)
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = Data, ordered = F, std.lv = F)
summary(model.sem, rsquare = T)
# cor(Data)
# Make categorical
Data[, 1] <- as.numeric(cut(Data[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(Data[, 2], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(Data[, 3], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(Data[, 4], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(Data[, 5], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(Data[, 6], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(Data[, 7], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(Data[, 8], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(Data[, 9], breaks = c(-Inf, thresh9, Inf)))
# cor(Data)
# lavCor(Data, ordered = T)
# Check lavaan vs mirt
model.sem.cat  <- sem(model = model, data = Data, ordered = T, std.lv = F)
summary(model.sem.cat, rsquare = T)
lavInspect(model.sem.cat, what = "est")$beta
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "graded")
coef(model.mirt)
summary(model.mirt)
fs <- fscores(model.mirt) #, full.scores.SE = T)
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
summary(model.sem.con)
lavInspect(model.sem.con, what = "est")$beta
lavInspect(model.sem.cat, what = "est")$beta
lavInspect(model.sem.con, what = "est")$beta
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
summary(model.sem.cat, rsquare = T)
summary(model.sem.con)
fs <- fscores(model.mirt, full.scores.SE = T)
fs <- as.data.frame(fs)
fs <- within(fs, {
evar_f1 = SE_F1^1 * (1 - SE_F1)
evar_f2 = SE_F2^1 * (1 - SE_F2)
evar_f3 = SE_F3^1 * (1 - SE_F3)
ld_f1   = 1 - SE_F1
ld_f2   = 1 - SE_F2
ld_f3   = 1 - SE_F3
})
fixed_values <- colMeans(fs)
str.model <- '
eta1 =~ F1
eta2 =~ F2
eta3 =~ F3
eta1 ~ eta2 + eta3
'
str.fit <- cfa(model = str.model, data = fs, std.lv = T, se = "none")
# Adequate par table and fix values
par_table <- parTable(str.fit)
par_table$est <- NULL
par_table$start <- NULL
# Which values are freely estimated?
par_table$free <- 0
par_table$free[par_table$op == "~"] <- 1:sum(par_table$op == "~")
par_table$free[12] <- 3
# Fix values of loadings and error variances
# Loadings
par_table$ustart[1] <- fixed_values["ld_f1"]
par_table$ustart[2] <- fixed_values["ld_f2"]
par_table$ustart[3] <- fixed_values["ld_f3"]
# Error variances
par_table$ustart[6] <- fixed_values["SE_F1"]
par_table$ustart[7] <- fixed_values["SE_F2"]
par_table$ustart[8] <- fixed_values["SE_F3"]
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none", control=list(iter.max=1))
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none", control=list(iter.max=50))
summary(str.final)
library(lavaan)
library(mirt)
library(dplyr)
# Data Generation
set.seed(5)
# Define relevant variables
N   <- 5000
thresh1 <- c(-2, 0, 2)
thresh2 <- c(-1, 0, 1)
thresh3 <- c(-1.2, 0.2, 1.2)
thresh4 <- c(-2.3, -0.5, 1)
thresh5 <- c(-1.2, 0.5, 1.7)
thresh6 <- c(-1.3, 0.7, 2.3)
thresh7 <- c(-2.4, -0.3, 0.7)
thresh8 <- c(-1.2, 0.6, 1.8)
thresh9 <- c(-1.4, 0.7, 1.9)
# Generate data
# MM
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
# SM
beta <- matrix(c(0, 0.3, 0.3,
0, 0,   0  ,
0, 0,   0  ), byrow = T, ncol = 3)
psi  <- matrix(c(1, 0,   0,
0, 1,   0.5,
0, 0.5, 1), byrow = T, ncol = 3)
I <- diag(3)
# Observed data
library(MASS)
sigma <- lambda %*% solve(I - beta) %*% psi %*% solve(t(I - beta)) %*% t(lambda) + theta
Data <- as.data.frame(mvrnorm(n = N, mu = rep(0, 9), Sigma = sigma, empirical = T))
colnames(Data) <- paste0(rep("x", 9), 1:9)
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = Data, ordered = F, std.lv = F)
summary(model.sem, rsquare = T)
# cor(Data)
# Make categorical
Data[, 1] <- as.numeric(cut(Data[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(Data[, 2], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(Data[, 3], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(Data[, 4], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(Data[, 5], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(Data[, 6], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(Data[, 7], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(Data[, 8], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(Data[, 9], breaks = c(-Inf, thresh9, Inf)))
# cor(Data)
# lavCor(Data, ordered = T)
# Check lavaan vs mirt
model.sem.cat  <- sem(model = model, data = Data, ordered = T, std.lv = F)
summary(model.sem.cat, rsquare = T)
lavInspect(model.sem.cat, what = "est")$beta
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "graded")
fs <- fscores(model.mirt) #, full.scores.SE = T)
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
lavInspect(model.sem.con, what = "est")$beta
fs <- fscores(model.mirt, full.scores.SE = T)
fs <- as.data.frame(fs)
fs <- within(fs, {
evar_f1 = SE_F1^1 * (1 - SE_F1)
evar_f2 = SE_F2^1 * (1 - SE_F2)
evar_f3 = SE_F3^1 * (1 - SE_F3)
ld_f1   = 1 - SE_F1
ld_f2   = 1 - SE_F2
ld_f3   = 1 - SE_F3
})
fixed_values <- colMeans(fs)
str.model <- '
eta1 =~ F1
eta2 =~ F2
eta3 =~ F3
eta1 ~ eta2 + eta3
'
str.fit <- cfa(model = str.model, data = fs, std.lv = T, se = "none")
# Adequate par table and fix values
par_table <- parTable(str.fit)
par_table$est <- NULL
par_table$start <- NULL
# Which values are freely estimated?
par_table$free <- 0
par_table$free[par_table$op == "~"] <- 1:sum(par_table$op == "~")
par_table$free[12] <- 3
# Fix values of loadings and error variances
# Loadings
par_table$ustart[1] <- fixed_values["ld_f1"]
par_table$ustart[2] <- fixed_values["ld_f2"]
par_table$ustart[3] <- fixed_values["ld_f3"]
# Error variances
par_table$ustart[6] <- fixed_values["SE_F1"]
par_table$ustart[7] <- fixed_values["SE_F2"]
par_table$ustart[8] <- fixed_values["SE_F3"]
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none", control=list(iter.max=50))
summary(str.final)
par_table$free[4] <- 0
par_table$ustart[4] <- 0.3
par_table$free[12] <- 0
par_table$ustart[12] <- 0.5
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none", control=list(iter.max=50))
summary(str.final)
str.model <- '
eta1 =~ F1
eta2 =~ F2
eta3 =~ F3
eta1 ~ eta2 + eta3
'
str.fit <- cfa(model = str.model, data = fs, std.lv = T, se = "none")
# Adequate par table and fix values
par_table <- parTable(str.fit)
par_table$est <- NULL
par_table$start <- NULL
# Which values are freely estimated?
par_table$free <- 0
par_table$free[par_table$op == "~"] <- 1:sum(par_table$op == "~")
par_table$free[12] <- 3
# Fix values of loadings and error variances
# Loadings
par_table$ustart[1] <- fixed_values["ld_f1"]
par_table$ustart[2] <- fixed_values["ld_f2"]
par_table$ustart[3] <- fixed_values["ld_f3"]
# Error variances
par_table$ustart[6] <- fixed_values["SE_F1"]
par_table$ustart[7] <- fixed_values["SE_F2"]
par_table$ustart[8] <- fixed_values["SE_F3"]
par_table$free[12] <- 0
par_table$ustart[12] <- 0.5
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none", control=list(iter.max=50))
summary(str.final)
# Data Generation
set.seed(5)
# Define relevant variables
N   <- 5000
thresh1 <- c(0)
thresh2 <- c(-1)
thresh3 <- c(1.2)
thresh4 <- c(-2.3)
thresh5 <- c(0.5)
thresh6 <- c(2.3)
thresh7 <- c(-0.3)
thresh8 <- c(-1.2)
thresh9 <- c(0.7)
# Generate data
# MM
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
# SM
beta <- matrix(c(0, 0.3, 0.3,
0, 0,   0  ,
0, 0,   0  ), byrow = T, ncol = 3)
psi  <- matrix(c(1, 0,   0,
0, 1,   0.5,
0, 0.5, 1), byrow = T, ncol = 3)
I <- diag(3)
# Observed data
library(MASS)
sigma <- lambda %*% solve(I - beta) %*% psi %*% solve(t(I - beta)) %*% t(lambda) + theta
Data <- as.data.frame(mvrnorm(n = N, mu = rep(0, 9), Sigma = sigma, empirical = T))
colnames(Data) <- paste0(rep("x", 9), 1:9)
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = Data, ordered = F, std.lv = F)
summary(model.sem, rsquare = T)
# cor(Data)
# Make categorical
Data[, 1] <- as.numeric(cut(Data[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(Data[, 2], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(Data[, 3], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(Data[, 4], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(Data[, 5], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(Data[, 6], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(Data[, 7], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(Data[, 8], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(Data[, 9], breaks = c(-Inf, thresh9, Inf)))
# cor(Data)
# lavCor(Data, ordered = T)
# Check lavaan vs mirt
model.sem.cat  <- sem(model = model, data = Data, ordered = T, std.lv = F)
summary(model.sem.cat, rsquare = T)
lavInspect(model.sem.cat, what = "est")$beta
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "2pl")
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "2PL")
fs <- fscores(model.mirt) #, full.scores.SE = T)
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
coef(model.mirt)
summary(model.mirt)
coef(model.mirt)
# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
summary(model.sem.con)
fs <- fscores(model.mirt, full.scores.SE = T)
fs <- as.data.frame(fs)
fs <- within(fs, {
evar_f1 = SE_F1^1 * (1 - SE_F1)
evar_f2 = SE_F2^1 * (1 - SE_F2)
evar_f3 = SE_F3^1 * (1 - SE_F3)
ld_f1   = 1 - SE_F1
ld_f2   = 1 - SE_F2
ld_f3   = 1 - SE_F3
})
fixed_values <- colMeans(fs)
str.model <- '
eta1 =~ F1
eta2 =~ F2
eta3 =~ F3
eta1 ~ eta2 + eta3
'
str.fit <- cfa(model = str.model, data = fs, std.lv = T, se = "none")
# Adequate par table and fix values
par_table <- parTable(str.fit)
par_table$est <- NULL
par_table$start <- NULL
# Which values are freely estimated?
par_table$free <- 0
par_table$free[par_table$op == "~"] <- 1:sum(par_table$op == "~")
par_table$free[12] <- 3
# Fix values of loadings and error variances
# Loadings
par_table$ustart[1] <- fixed_values["ld_f1"]
par_table$ustart[2] <- fixed_values["ld_f2"]
par_table$ustart[3] <- fixed_values["ld_f3"]
# Error variances
par_table$ustart[6] <- fixed_values["SE_F1"]
par_table$ustart[7] <- fixed_values["SE_F2"]
par_table$ustart[8] <- fixed_values["SE_F3"]
par_table$free[4] <- 0
par_table$ustart[4] <- 0.3
str.model <- '
eta1 =~ F1
eta2 =~ F2
eta3 =~ F3
eta1 ~ eta2 + eta3
'
str.fit <- cfa(model = str.model, data = fs, std.lv = T, se = "none")
# Adequate par table and fix values
par_table <- parTable(str.fit)
par_table$est <- NULL
par_table$start <- NULL
# Which values are freely estimated?
par_table$free <- 0
par_table$free[par_table$op == "~"] <- 1:sum(par_table$op == "~")
par_table$free[12] <- 3
# Fix values of loadings and error variances
# Loadings
par_table$ustart[1] <- fixed_values["ld_f1"]
par_table$ustart[2] <- fixed_values["ld_f2"]
par_table$ustart[3] <- fixed_values["ld_f3"]
# Error variances
par_table$ustart[6] <- fixed_values["SE_F1"]
par_table$ustart[7] <- fixed_values["SE_F2"]
par_table$ustart[8] <- fixed_values["SE_F3"]
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none", control=list(iter.max=50))
summary(str.final)
setwd("~/GitHub/OrdinalSim")
