# model.sem  <- sem(model = model, data = Data, ordered = F, std.lv = F)
# summary(model.sem, rsquare = T)
# cor(Data)
# Make categorical
# Data <- matrix(data = NA, nrow = 1000, ncol = 9)
# Data[, 1] <- as.numeric(cut(facsc[, 1], breaks = c(-Inf, thresh1, Inf)))
# Data[, 2] <- as.numeric(cut(facsc[, 1], breaks = c(-Inf, thresh2, Inf)))
# Data[, 3] <- as.numeric(cut(facsc[, 1], breaks = c(-Inf, thresh3, Inf)))
# Data[, 4] <- as.numeric(cut(facsc[, 2], breaks = c(-Inf, thresh4, Inf)))
# Data[, 5] <- as.numeric(cut(facsc[, 2], breaks = c(-Inf, thresh5, Inf)))
# Data[, 6] <- as.numeric(cut(facsc[, 2], breaks = c(-Inf, thresh6, Inf)))
# Data[, 7] <- as.numeric(cut(facsc[, 3], breaks = c(-Inf, thresh7, Inf)))
# Data[, 8] <- as.numeric(cut(facsc[, 3], breaks = c(-Inf, thresh8, Inf)))
# Data[, 9] <- as.numeric(cut(facsc[, 3], breaks = c(-Inf, thresh9, Inf)))
Data[, 1] <- as.numeric(cut(Data[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(Data[, 2], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(Data[, 3], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(Data[, 4], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(Data[, 5], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(Data[, 6], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(Data[, 7], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(Data[, 8], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(Data[, 9], breaks = c(-Inf, thresh9, Inf)))
colnames(Data) <- paste0(rep("x", 9), 1:9)
apply(Data, MARGIN = 2, hist)
# Check lavaan vs mirt
model.sem.cat  <- sem(model = model, data = Data, ordered = T, std.lv = F)
cor(Data)
lavCor(Data, ordered = T)
sigma
lavCov(Data, ordered = T)
cor(Data)
lavCor(Data, ordered = T, output = "cov")
cov2cor(sigma)
cor(Data)
lavCor(Data, ordered = T)
# summary(model.sem.cat, rsquare = T)
lavInspect(model.sem.cat, what = "est")$beta
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "graded")
fs <- fscores(model.mirt) #, full.scores.SE = T)
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
lm(f1 ~ f2 + f3, data = as.data.frame(predict(model.sem.cat)))
# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
# summary(model.sem.con)
lavInspect(model.sem.con, what = "est")$beta
# SINGLE INDICATOR
fs <- fscores(model.mirt, full.scores.SE = T)
fs <- as.data.frame(fs)
fs <- within(fs, {
evar_f1 = SE_F1^1 * (1 - SE_F1)
evar_f2 = SE_F2^1 * (1 - SE_F2)
evar_f3 = SE_F3^1 * (1 - SE_F3)
ld_f1   = 1 - SE_F1
ld_f2   = 1 - SE_F2
ld_f3   = 1 - SE_F3
})
fixed_values <- colMeans(fs)
str.model <- '
eta1 =~ F1
eta2 =~ F2
eta3 =~ F3
eta1 ~ eta2 + eta3
'
str.fit <- cfa(model = str.model, data = fs, std.lv = T, se = "none")
# Adequate par table and fix values
par_table <- parTable(str.fit)
par_table$est <- NULL
par_table$start <- NULL
# Which values are freely estimated?
par_table$free <- 0
par_table$free[par_table$op == "~"] <- 1:sum(par_table$op == "~")
par_table$free[12] <- 3
# Fix values of loadings and error variances
# Loadings
par_table$ustart[1] <- fixed_values["ld_f1"]
par_table$ustart[2] <- fixed_values["ld_f2"]
par_table$ustart[3] <- fixed_values["ld_f3"]
# Error variances
par_table$ustart[6] <- fixed_values["evar_f1"]
par_table$ustart[7] <- fixed_values["evar_f2"]
par_table$ustart[8] <- fixed_values["evar_f3"]
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none")
# summary(str.final)
lavInspect(str.final, what = "est")$beta
library(lavaan)
library(mirt)
library(dplyr)
# Data Generation
# set.seed(5)
# Define relevant variables
N   <- 1000
thresh1 <- c(0)
thresh2 <- c(0)
thresh3 <- c(0)
thresh4 <- c(0)
thresh5 <- c(0)
thresh6 <- c(0)
thresh7 <- c(0)
thresh8 <- c(0)
thresh9 <- c(0)
# thresh1 <- c(-2, 0, 2)
# thresh2 <- c(-1, 0, 1)
# thresh3 <- c(-1.2, 0.2, 1.2)
# thresh4 <- c(-2.3, -0.5, 1)
# thresh5 <- c(-1.2, 0.5, 1.7)
# thresh6 <- c(-1.3, 0.7, 2.3)
# thresh7 <- c(-2.4, -0.3, 0.7)
# thresh8 <- c(-1.2, 0.6, 1.8)
# thresh9 <- c(-1.4, 0.7, 1.9)
# Generate data
# MM
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
# SM
beta <- matrix(c(0, 0.3, 0.3,
0, 0,   0  ,
0, 0,   0  ), byrow = T, ncol = 3)
psi  <- matrix(c(1, 0,   0,
0, 1,   0.5,
0, 0.5, 1), byrow = T, ncol = 3)
I <- diag(3)
# Factor scores
phi <- solve(I - beta) %*% psi %*% solve(t(I - beta))
# facsc <- as.data.frame(mvrnorm(n = N, mu = rep(0, 3), Sigma = phi, empirical = T)) # These are factor scores
# Observed data
sigma <- lambda %*% phi %*% t(lambda) + theta
Data <- as.data.frame(mvrnorm(n = N, mu = rep(0, 9), Sigma = sigma, empirical = T))
colnames(Data) <- paste0(rep("x", 9), 1:9)
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = Data, ordered = F, std.lv = F)
summary(model.sem, rsquare = T)
# Make categorical
Data[, 1] <- as.numeric(cut(Data[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(Data[, 2], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(Data[, 3], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(Data[, 4], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(Data[, 5], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(Data[, 6], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(Data[, 7], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(Data[, 8], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(Data[, 9], breaks = c(-Inf, thresh9, Inf)))
# cor(Data)
# lavCor(Data, ordered = T)
# Check lavaan vs mirt
model.sem.cat  <- sem(model = model, data = Data, ordered = T, std.lv = F)
lavInspect(model.sem.cat, what = "est")$beta
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "2PL")
coef(model.mirt)
summary(model.mirt)
lavInspect(model.sem.cat, what = "est")$beta
fs <- fscores(model.mirt) #, full.scores.SE = T)
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
lm(f1 ~ f2 + f3, data = as.data.frame(predict(model.sem.cat)))
# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
# summary(model.sem.con)
lavInspect(model.sem.con, what = "est")$beta
library(lavaan)
library(mirt)
library(dplyr)
# Data Generation
# set.seed(5)
# Define relevant variables
N   <- 1000
thresh1 <- c(0.5)
thresh2 <- c(-0.5)
thresh3 <- c(1)
thresh4 <- c(0.3)
thresh5 <- c(-1)
thresh6 <- c(-0.7)
thresh7 <- c(0.7)
thresh8 <- c(1.5)
thresh9 <- c(-1.5)
# thresh1 <- c(-2, 0, 2)
# thresh2 <- c(-1, 0, 1)
# thresh3 <- c(-1.2, 0.2, 1.2)
# thresh4 <- c(-2.3, -0.5, 1)
# thresh5 <- c(-1.2, 0.5, 1.7)
# thresh6 <- c(-1.3, 0.7, 2.3)
# thresh7 <- c(-2.4, -0.3, 0.7)
# thresh8 <- c(-1.2, 0.6, 1.8)
# thresh9 <- c(-1.4, 0.7, 1.9)
# Generate data
# MM
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
# SM
beta <- matrix(c(0, 0.3, 0.3,
0, 0,   0  ,
0, 0,   0  ), byrow = T, ncol = 3)
psi  <- matrix(c(1, 0,   0,
0, 1,   0.5,
0, 0.5, 1), byrow = T, ncol = 3)
I <- diag(3)
# Factor scores
phi <- solve(I - beta) %*% psi %*% solve(t(I - beta))
# facsc <- as.data.frame(mvrnorm(n = N, mu = rep(0, 3), Sigma = phi, empirical = T)) # These are factor scores
# Observed data
sigma <- lambda %*% phi %*% t(lambda) + theta
Data <- as.data.frame(mvrnorm(n = N, mu = rep(0, 9), Sigma = sigma, empirical = T))
colnames(Data) <- paste0(rep("x", 9), 1:9)
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
# model.sem  <- sem(model = model, data = Data, ordered = F, std.lv = F)
# summary(model.sem, rsquare = T)
# cor(Data)
# Make categorical
Data[, 1] <- as.numeric(cut(Data[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(Data[, 2], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(Data[, 3], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(Data[, 4], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(Data[, 5], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(Data[, 6], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(Data[, 7], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(Data[, 8], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(Data[, 9], breaks = c(-Inf, thresh9, Inf)))
# cor(Data)
# lavCor(Data, ordered = T)
# Check lavaan vs mirt
model.sem.cat  <- sem(model = model, data = Data, ordered = T, std.lv = F)
lavInspect(model.sem.cat, what = "est")$beta
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "2PL")
#coef(model.mirt)
#summary(model.mirt)
fs <- fscores(model.mirt) #, full.scores.SE = T)
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
lm(f1 ~ f2 + f3, data = as.data.frame(predict(model.sem.cat)))
# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
# summary(model.sem.con)
lavInspect(model.sem.con, what = "est")$beta
View(Data)
summary(model.sem.con)
summary(model.sem.cat)
library(lavaan)
library(mirt)
library(dplyr)
# Data Generation
# set.seed(5)
# Define relevant variables
N   <- 1000
thresh1 <- c(0.5)
thresh2 <- c(-0.5)
thresh3 <- c(1)
thresh4 <- c(0.3)
thresh5 <- c(-1)
thresh6 <- c(-0.7)
thresh7 <- c(0.7)
thresh8 <- c(1.5)
thresh9 <- c(-1.5)
# thresh1 <- c(-2, 0, 2)
# thresh2 <- c(-1, 0, 1)
# thresh3 <- c(-1.2, 0.2, 1.2)
# thresh4 <- c(-2.3, -0.5, 1)
# thresh5 <- c(-1.2, 0.5, 1.7)
# thresh6 <- c(-1.3, 0.7, 2.3)
# thresh7 <- c(-2.4, -0.3, 0.7)
# thresh8 <- c(-1.2, 0.6, 1.8)
# thresh9 <- c(-1.4, 0.7, 1.9)
# Generate data
# MM
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
# SM
beta <- matrix(c(0, 0.3, 0.3,
0, 0,   0  ,
0, 0,   0  ), byrow = T, ncol = 3)
psi  <- matrix(c(1, 0,   0,
0, 1,   0.5,
0, 0.5, 1), byrow = T, ncol = 3)
I <- diag(3)
# Factor scores
phi <- solve(I - beta) %*% psi %*% solve(t(I - beta))
# facsc <- as.data.frame(mvrnorm(n = N, mu = rep(0, 3), Sigma = phi, empirical = T)) # These are factor scores
# Observed data
sigma <- lambda %*% phi %*% t(lambda) + theta
Data <- as.data.frame(mvrnorm(n = N, mu = rep(0, 9), Sigma = sigma, empirical = T))
colnames(Data) <- paste0(rep("x", 9), 1:9)
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
# model.sem  <- sem(model = model, data = Data, ordered = F, std.lv = F)
# summary(model.sem, rsquare = T)
# cor(Data)
# Make categorical
Data[, 1] <- as.numeric(cut(Data[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(Data[, 2], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(Data[, 3], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(Data[, 4], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(Data[, 5], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(Data[, 6], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(Data[, 7], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(Data[, 8], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(Data[, 9], breaks = c(-Inf, thresh9, Inf)))
# cor(Data)
# lavCor(Data, ordered = T)
# Check lavaan vs mirt
model.sem.cat  <- sem(model = model, data = Data, ordered = T, std.lv = F)
lavInspect(model.sem.cat, what = "est")$beta
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "2PL")
#coef(model.mirt)
#summary(model.mirt)
fs <- fscores(model.mirt) #, full.scores.SE = T)
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
lm(f1 ~ f2 + f3, data = as.data.frame(predict(model.sem.cat)))
# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
# summary(model.sem.con)
lavInspect(model.sem.con, what = "est")$beta
55/2
263/3
library(lavaan)
# wd
setwd("~/GitHub/OrdinalSim")
# source necessary functions
source("DataGeneration.R")
source("Functions/MMG-SEM.R")
sort(sample(seq(-1.5,1.5, by = .1), size = 4, replace = F))
source("~/GitHub/OrdinalSim/DataGeneration.R", echo=TRUE)
library(lavaan)
# Define models for future simulations
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 100, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, c = 4, threshold = "equal",
NonInvType = "fixed", randomVarX = T, c = 2)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 100, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "equal",
NonInvType = "fixed", randomVarX = T, c = 2)
source("~/GitHub/OrdinalSim/DataGeneration.R", echo=TRUE)
source("~/GitHub/OrdinalSim/DataGeneration.R", echo=TRUE)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 100, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "equal",
NonInvType = "fixed", randomVarX = T, c = 2)
apply(tmp, 2, function(x){as.numeric(cut(x, breaks = c(-Inf, thresh, Inf)))})
source("~/GitHub/OrdinalSim/DataGeneration.R", echo=TRUE)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 100, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "equal",
NonInvType = "fixed", randomVarX = T, c = 2)
source("~/GitHub/OrdinalSim/DataGeneration.R", echo=TRUE)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 100, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "equal",
NonInvType = "fixed", randomVarX = T, c = 2)
source("~/GitHub/OrdinalSim/DataGeneration.R", echo=TRUE)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 100, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "equal",
NonInvType = "fixed", randomVarX = T, c = 2)
traceback
traceback()
source("~/GitHub/OrdinalSim/DataGeneration.R", echo=TRUE)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 100, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "equal",
NonInvType = "fixed", randomVarX = T, c = 2)
source("~/GitHub/OrdinalSim/DataGeneration.R", echo=TRUE)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 100, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "equal",
NonInvType = "fixed", randomVarX = T, c = 2)
# Run MMG-SEM
fit.con <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = F)
fit.cat <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = T)
round(fit.con$posteriors, 2)
round(fit.cat$posteriors, 2)
fit.con$param$beta_ks
fit.cat$param$beta_ks
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 100, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "unequal",
NonInvType = "fixed", randomVarX = T, c = 2)
# Run MMG-SEM
fit.con <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = F)
fit.cat <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = T)
round(fit.con$posteriors, 2)
round(fit.cat$posteriors, 2)
fit.con$param$beta_ks
fit.cat$param$beta_ks
fit.con$param$lambda
fit.cat$param$lambda
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 24, N_g = 50, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "unequal",
NonInvType = "fixed", randomVarX = T, c = 3)
# Run MMG-SEM
fit.con <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = F)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 12, N_g = 50, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "unequal",
NonInvType = "fixed", randomVarX = T, c = 3)
# Run MMG-SEM
fit.con <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = F)
fit.cat <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = T)
round(fit.con$posteriors, 2)
round(fit.cat$posteriors, 2)
round(fit.con$posteriors, 2)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 12, N_g = 50, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "unequal",
NonInvType = "fixed", randomVarX = T, c = 3)
# Run MMG-SEM
fit.con <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = F)
fit.cat <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = T)
source("~/GitHub/OrdinalSim/DataGeneration.R", echo=TRUE)
# Generate dummy data
Data <- DataGeneration(model = model, nclus = 2, ngroups = 12, N_g = 50, reg_coeff = 0.3,
balance = "unb", NonInvSize = 0, NonInvItems = 0, NonInvG = 0, threshold = "unequal",
NonInvType = "fixed", randomVarX = T, c = 3)
# Run MMG-SEM
fit.con <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = F)
fit.cat <- MMGSEM(dat = Data$SimData, step1model = S1, step2model = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, allG = T, est_method = "local", ordered = T)
round(fit.con$posteriors, 2)
round(fit.cat$posteriors, 2)
fit.con$param$beta_ks
fit.cat$param$beta_ks
fit.con$param$lambda
fit.cat$param$lambda
